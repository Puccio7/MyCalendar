{"version":3,"sources":["App.js","serviceWorkerRegistration.js","index.js"],"names":["TARIFFE_DEFAULT","tariffa_base","tariffa_notturna","tariffa_festiva","tariffa_festiva_notturna","tariffa_straordinario","App","currentDate","setCurrentDate","useState","today","Date","getFullYear","getMonth","turni","setTurni","tariffe","setTariffe","showTariffe","setShowTariffe","showRiepilogo","setShowRiepilogo","deferredPrompt","setDeferredPrompt","showInstallButton","setShowInstallButton","useEffect","savedTurni","localStorage","getItem","savedTariffe","JSON","parse","handleBeforeInstallPrompt","e","preventDefault","window","addEventListener","removeEventListener","setItem","stringify","React","createElement","className","onClick","handleInstallClick","prompt","userChoice","then","choiceResult","outcome","console","log","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","createRoot","document","getElementById","render","StrictMode","URL","process","href","origin","fetch","headers","Service-Worker","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"+JAKA,MAAMA,EAAkB,CACtBC,aAAc,GACdC,iBAAkB,GAClBC,gBAAiB,GACjBC,yBAA0B,GAC1BC,sBAAuB,IAiNVC,MArLf,WACE,MAAOC,EAAaC,GAAkBC,mBAAS,KAC7C,MAAMC,EAAQ,IAAIC,KAClB,OAAO,IAAIA,KAAKD,EAAME,cAAeF,EAAMG,WAAY,MAElDC,EAAOC,GAAYN,mBAAS,KAC5BO,EAASC,GAAcR,mBAAST,IAChCkB,EAAaC,GAAkBV,oBAAS,IACxCW,EAAeC,GAAoBZ,oBAAS,IAE5Ca,EAAgBC,GAAqBd,mBAAS,OAC9Ce,EAAmBC,GAAwBhB,oBAAS,GA2J3D,OAzJAiB,oBAAU,KACR,MAAMC,EAAaC,aAAaC,QAAQ,aAClCC,EAAeF,aAAaC,QAAQ,eACtCF,GAAYZ,EAASgB,KAAKC,MAAML,IAChCG,GAAcb,EAAWc,KAAKC,MAAMF,IAExC,MAAMG,EAA6BC,IACjCA,EAAEC,iBACFZ,EAAkBW,GAClBT,GAAqB,IAIvB,OADAW,OAAOC,iBAAiB,sBAAuBJ,GACxC,IAAMG,OAAOE,oBAAoB,sBAAuBL,IAC9D,IAEHP,oBAAU,KACRE,aAAaW,QAAQ,YAAaR,KAAKS,UAAU1B,KAChD,CAACA,IAEJY,oBAAU,KACRE,aAAaW,QAAQ,cAAeR,KAAKS,UAAUxB,KAClD,CAACA,IAoIFyB,IAAAC,cAAA,OAAKC,UAAU,OACZnB,GACCiB,IAAAC,cAAA,UACEE,QAjBmBC,KACrBvB,IACFA,EAAewB,SACfxB,EAAeyB,WAAWC,KAAKC,IACA,aAAzBA,EAAaC,SACfC,QAAQC,IAAI,mBAEd7B,EAAkB,MAClBE,GAAqB,OAUnBkB,UAAU,6EACX,kBC5MT,MAAMU,EAAcC,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MAAM,2DAwBnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTX,KAAMgB,IACLA,EAAaC,cAAgB,MAC3B,MAAMC,EAAmBF,EAAaG,WACtB,MAApBD,IAGIA,EAAiBE,cAAgB,MACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAC1BnB,QAAQC,IAAI,oDACRQ,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAGlBb,QAAQC,IAAI,4DACRQ,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,YAO5BS,MAAOC,IACNvB,QAAQuB,MAAM,sDAAuDA,KCxD9DC,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHtC,IAAAC,cAACD,IAAMuC,WAAU,KACfvC,IAAAC,cAACpC,EAAG,QDKD,SAAkBsD,GACvB,GAA6C,kBAAmBC,UAAW,CAEzE,GADkB,IAAIoB,IAAIC,sBAAwB9C,OAAOmB,SAAS4B,MACpDC,SAAWhD,OAAOmB,SAAS6B,OACvC,OAGFhD,OAAOC,iBAAiB,OAAQ,KAC9B,MAAMsB,EAAQuB,wCAEV7B,EA0CV,SAAiCM,EAAOC,GAEtCyB,MAAM1B,EAAO,CACX2B,QAAS,CAAEC,iBAAkB,YAE5BvC,KAAMwC,IAEL,MAAMC,EAAcD,EAASF,QAAQI,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7C,KAAMgB,IAClCA,EAAa8B,aAAa9C,KAAK,KAC7BZ,OAAOmB,SAASwC,aAKpBrC,EAAgBC,EAAOC,KAG1Ba,MAAM,KACLtB,QAAQC,IAAI,iFAhEV4C,CAAwBrC,EAAOC,GAG/BF,EAAgBC,EAAOC,MCf/BqC","file":"static/js/main.90ce3e46.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Calendar, Clock } from 'lucide-react';\nimport Calendario from './Calendario';\n\n// Definizione delle tariffe orarie (modificabili dall'utente)\nconst TARIFFE_DEFAULT = {\n  tariffa_base: 10, // Euro/ora\n  tariffa_notturna: 12, // Euro/ora\n  tariffa_festiva: 15, // Euro/ora\n  tariffa_festiva_notturna: 18, // Euro/ora\n  tariffa_straordinario: 12, // Euro/ora per ore oltre le 4 ore standard\n};\n\n// Giorni festivi in Italia 2025 (esempio)\nconst GIORNI_FESTIVI_2025 = [\n  '2025-01-01', '2025-01-06', '2025-04-20', '2025-04-21',\n  '2025-04-25', '2025-05-01', '2025-06-02', '2025-08-15',\n  '2025-11-01', '2025-12-08', '2025-12-25', '2025-12-26'\n];\n\nfunction parseTime(timeString) {\n  if (!timeString) return { hours: 0, minutes: 0 };\n  const [hours, minutes] = timeString.split(':').map(Number);\n  return { hours, minutes };\n}\n\nfunction isNightHour(hour) {\n  return hour >= 20 || hour < 8;\n}\n\nfunction isHoliday(dateString) {\n  return GIORNI_FESTIVI_2025.includes(dateString);\n}\n\nfunction formatDateString(year, month, day) {\n  return `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\n}\n\nfunction App() {\n  const [currentDate, setCurrentDate] = useState(() => {\n    const today = new Date();\n    return new Date(today.getFullYear(), today.getMonth(), 1);\n  });\n  const [turni, setTurni] = useState({});\n  const [tariffe, setTariffe] = useState(TARIFFE_DEFAULT);\n  const [showTariffe, setShowTariffe] = useState(false);\n  const [showRiepilogo, setShowRiepilogo] = useState(false);\n\n  const [deferredPrompt, setDeferredPrompt] = useState(null);\n  const [showInstallButton, setShowInstallButton] = useState(false);\n\n  useEffect(() => {\n    const savedTurni = localStorage.getItem('app_turni');\n    const savedTariffe = localStorage.getItem('app_tariffe');\n    if (savedTurni) setTurni(JSON.parse(savedTurni));\n    if (savedTariffe) setTariffe(JSON.parse(savedTariffe));\n\n    const handleBeforeInstallPrompt = (e) => {\n      e.preventDefault();\n      setDeferredPrompt(e);\n      setShowInstallButton(true);\n    };\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    return () => window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('app_turni', JSON.stringify(turni));\n  }, [turni]);\n\n  useEffect(() => {\n    localStorage.setItem('app_tariffe', JSON.stringify(tariffe));\n  }, [tariffe]);\n\n  const prevMonth = () => setCurrentDate(prev => new Date(prev.getFullYear(), prev.getMonth() - 1, 1));\n  const nextMonth = () => setCurrentDate(prev => new Date(prev.getFullYear(), prev.getMonth() + 1, 1));\n\n  const aggiungiTurno = (day) => {\n    const dateString = formatDateString(currentDate.getFullYear(), currentDate.getMonth() + 1, day);\n    setTurni(prev => ({\n      ...prev,\n      [dateString]: [...(prev[dateString] || []), { inizio: \"09:00\", fine: \"13:00\" }]\n    }));\n  };\n\n  const modificaTurno = (dateString, index, field, value) => {\n    setTurni(prev => {\n      const nuoviTurni = { ...prev };\n      nuoviTurni[dateString] = [...nuoviTurni[dateString]];\n      nuoviTurni[dateString][index] = {\n        ...nuoviTurni[dateString][index],\n        [field]: value\n      };\n      return nuoviTurni;\n    });\n  };\n\n  const rimuoviTurno = (dateString, index) => {\n    setTurni(prev => {\n      const nuoviTurni = { ...prev };\n      nuoviTurni[dateString] = nuoviTurni[dateString].filter((_, i) => i !== index);\n      if (nuoviTurni[dateString].length === 0) delete nuoviTurni[dateString];\n      return nuoviTurni;\n    });\n  };\n\n  const calcolaOreTurno = (inizio, fine) => {\n    const start = parseTime(inizio);\n    const end = parseTime(fine);\n    let totalMinutes = (end.hours * 60 + end.minutes) - (start.hours * 60 + start.minutes);\n    if (totalMinutes < 0) totalMinutes += 24 * 60;\n    return totalMinutes / 60;\n  };\n\n  const categorizzaOreTurno = (inizio, fine, isFestivo) => {\n    const start = parseTime(inizio);\n    const end = parseTime(fine);\n    let currentHour = start.hours;\n    let currentMinute = start.minutes;\n    let normal = 0, night = 0, holiday = 0, holidayNight = 0, total = 0;\n    if (start.hours === end.hours && start.minutes === end.minutes) return { normalHours: 0, nightHours: 0, holidayHours: 0, holidayNightHours: 0, overtimeHours: 0, totalHours: 0 };\n    while (true) {\n      if (isFestivo) {\n        isNightHour(currentHour) ? holidayNight++ : holiday++;\n      } else {\n        isNightHour(currentHour) ? night++ : normal++;\n      }\n      total++;\n      if (currentHour === end.hours && currentMinute === end.minutes) break;\n      currentMinute++;\n      if (currentMinute === 60) { currentMinute = 0; currentHour = (currentHour + 1) % 24; }\n    }\n    const totalHours = total / 60;\n    let overtime = 0;\n    if (totalHours > 4) {\n      overtime = totalHours - 4;\n      const factor = 4 / totalHours;\n      normal *= factor;\n      night *= factor;\n      holiday *= factor;\n      holidayNight *= factor;\n    }\n    return {\n      normalHours: normal / 60,\n      nightHours: night / 60,\n      holidayHours: holiday / 60,\n      holidayNightHours: holidayNight / 60,\n      overtimeHours: overtime,\n      totalHours: totalHours\n    };\n  };\n\n  const calcolaRiepilogoMese = () => {\n    const riepilogo = {\n      oreTotali: 0,\n      oreNormali: 0,\n      oreNotturne: 0,\n      oreFestive: 0,\n      oreFestiveNotturne: 0,\n      oreStraordinario: 0,\n      stipendioStimato: 0\n    };\n    const anno = currentDate.getFullYear();\n    const mese = currentDate.getMonth() + 1;\n    Object.entries(turni).forEach(([data, turniGiorno]) => {\n      const [a, m] = data.split('-').map(Number);\n      if (a !== anno || m !== mese) return;\n      const isFestivo = isHoliday(data);\n      turniGiorno.forEach(turno => {\n        const ore = categorizzaOreTurno(turno.inizio, turno.fine, isFestivo);\n        riepilogo.oreTotali += ore.totalHours;\n        riepilogo.oreNormali += ore.normalHours;\n        riepilogo.oreNotturne += ore.nightHours;\n        riepilogo.oreFestive += ore.holidayHours;\n        riepilogo.oreFestiveNotturne += ore.holidayNightHours;\n        riepilogo.oreStraordinario += ore.overtimeHours;\n        riepilogo.stipendioStimato +=\n          ore.normalHours * tariffe.tariffa_base +\n          ore.nightHours * tariffe.tariffa_notturna +\n          ore.holidayHours * tariffe.tariffa_festiva +\n          ore.holidayNightHours * tariffe.tariffa_festiva_notturna +\n          ore.overtimeHours * tariffe.tariffa_straordinario;\n      });\n    });\n    Object.keys(riepilogo).forEach(k => {\n      riepilogo[k] = Math.round(riepilogo[k] * 100) / 100;\n    });\n    return riepilogo;\n  };\n\n  const handleInstallClick = () => {\n    if (deferredPrompt) {\n      deferredPrompt.prompt();\n      deferredPrompt.userChoice.then(choiceResult => {\n        if (choiceResult.outcome === 'accepted') {\n          console.log('App installata!');\n        }\n        setDeferredPrompt(null);\n        setShowInstallButton(false);\n      });\n    }\n  };\n\n  return (\n    <div className=\"p-4\">\n      {showInstallButton && (\n        <button\n          onClick={handleInstallClick}\n          className=\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-4\"\n        >\n          Installa App\n        </button>\n      )}\n      {/* Altri componenti e logica UI qui */}\n    </div>\n  );\n}\n\nexport default App;\n","// Questo codice permette di registrare un service worker.\r\n// Questo consente all'app di caricarsi più velocemente nelle visite successive e fornire\r\n// funzionalità offline. Tuttavia, ciò significa anche che gli aggiornamenti dell'app\r\n// arriveranno all'utente solo quando visiterà di nuovo la pagina e gli asset\r\n// nel cache saranno aggiornati.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] è l'indirizzo localhost IPv6.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 sono considerati localhost per IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = process.env.PUBLIC_URL + '/service-worker.js';\r\n\r\n      if (isLocalhost) {\r\n        // Siamo in localhost. Verifichiamo se esiste un service worker\r\n        checkValidServiceWorker(swUrl, config);\r\n      } else {\r\n        // Non siamo in localhost. Registriamo il service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\nif (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              console.log('Nuovo contenuto disponibile; aggiorna la pagina.');\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              console.log('Il contenuto è salvato nella cache per l\\'uso offline.');\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Errore durante la registrazione del service worker:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Verifica se il service worker può essere trovato.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Verifica che il service worker esista e che siamo davvero ottenendo un file JS.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // Nessun service worker trovato. Probabilmente l'app è su un host diverso.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker trovato. Procedi normalmente.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('Nessuna connessione internet. L\\'app sta funzionando in modalità offline.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// Registra il service worker per la funzionalità offline\nserviceWorkerRegistration.register();"],"sourceRoot":""}